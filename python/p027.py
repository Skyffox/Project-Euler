# pylint: disable=no-name-in-module, line-too-long
"""
Problem 27: Quadratic Primes

Problem description:
Considering quadratics of the form: n² + an + b, where |a| < 1000 and |b| ≤ 1000.
Where |n| is the modulus (absolute value) of n.

Find the product of the coefficients, a and b, for the quadratic expression
that produces the maximum number of primes for consecutive values of n, starting with n = 0.

Answer: -59231
"""

from typing import Set
from utils import profiler, sieve_of_atkin


def check_primes(a: int, b: int, primes_set: Set[int]) -> int:
    """
    Counts how many consecutive primes are generated by the quadratic expression n² + an + b.
    
    Args:
        a (int): The coefficient of the linear term.
        b (int): The constant term of the quadratic expression.
        primes_set (set): A set of primes to check against.
    
    Returns:
        int: The number of consecutive primes generated by the quadratic expression.
    """
    n = 0
    while True:
        num = n**2 + a * n + b
        if num <= 1 or num not in primes_set:
            break
        n += 1
    return n


@profiler
def compute() -> int:
    """
    Finds the product of the coefficients a and b that produces the maximum number of primes
    for consecutive values of n using the quadratic expression n² + an + b.

    Returns:
        int: The product of the coefficients a and b.
    """
    # Precompute primes up to a limit using the sieve method
    prime_limit = 100000
    primes_set = set(sieve_of_atkin(prime_limit))

    most_primes = 0
    max_a = 0
    max_b = 0

    # Iterate over a and b, checking only necessary values
    for a in range(-999, 1000, 2): # Only check odd a values (even a doesn't change the behavior)
        for b in range(2, 1001):
            if b not in primes_set:
                continue # Skip non-prime values of b

            primes = check_primes(a, b, primes_set)
            if primes > most_primes:
                most_primes = primes
                max_a = a
                max_b = b

    # Return the product of the coefficients a and b
    return max_a * max_b


if __name__ == "__main__":
    print(f"Problem 27: {compute()}")
