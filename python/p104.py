# pylint: disable=line-too-long
"""
Problem 104: Fibonacci Pandigital Numbers

Problem description:
The Fibonacci sequence is defined as follows: F₁ = 1, F₂ = 1, Fₙ = Fₙ₋₁ + Fₙ₋₂ for n > 2.
The Fibonacci numbers are generated by the recurrence relation above. It is a well-known fact that the Fibonacci numbers grow exponentially as n increases.

We are tasked with finding the first Fibonacci number whose first nine digits and last nine digits are both pandigital numbers. A 9-digit pandigital number 
is a number containing all digits from 1 to 9 exactly once. We need to find the index `k` of the first Fibonacci number with this property.

Answer: 329468
"""

from math import log
from utils import profiler


def first_n_digits(num: int, n: int) -> int:
    """
    Extract the first n digits of a number.

    This function calculates the first n digits of a given number by using logarithms. It avoids converting the
    number to a string and directly computes the result mathematically, which is more efficient for large numbers.

    Args:
        num (int): The number from which the first n digits are to be extracted.
        n (int): The number of digits to extract from the beginning of the number.

    Returns:
        int: The first n digits of the given number.
    """
    return num // 10 ** (int(log(num, 10)) - n + 1)


def is_pandigital(num: int, digits=9) -> bool:
    """
    Check if a given number is a pandigital number.

    A number is considered pandigital if it contains all digits from 1 to the specified number (default is 9) exactly once.
    This function sorts the digits of the number and compares it to the sorted string of numbers from 1 to the given number.

    Args:
        num (int): The number to check for the pandigital property.
        digits (int, optional): The number of digits to check (default is 9, i.e., pandigital from 1 to 9).

    Returns:
        bool: True if the number is pandigital, False otherwise.
    """
    num_str = str(num)
    return ''.join(sorted(num_str)) == ''.join(str(i) for i in range(1, digits + 1))


@profiler
def compute() -> int:
    """
    Compute the index `k` of the first Fibonacci number whose first nine digits and last nine digits
    are both pandigital numbers.

    The Fibonacci sequence is generated iteratively. For each Fibonacci number, the last nine digits and the first 
    nine digits are checked to see if they are pandigital. The function stops when such a Fibonacci number is found.

    Returns:
        int: The index `k` of the first Fibonacci number that meets the pandigital condition.
    """
    # Initialize the first two Fibonacci numbers and the index
    fibnum_1 = 1
    fibnum_2 = 1
    fib = 0
    iterator = 2

    # Generate Fibonacci numbers until the required condition is met
    while True:
        iterator += 1
        fib = fibnum_1 + fibnum_2

        # Get the last 9 digits
        tail = fib % 10**9
        if is_pandigital(tail, digits=9):
            # Get the first 9 digits
            head = first_n_digits(fib, 9)
            if is_pandigital(head, digits=9):
                return iterator

        # Update the previous Fibonacci numbers
        fibnum_2 = fibnum_1
        fibnum_1 = fib


if __name__ == "__main__":
    print(f"Problem 104: {compute()}")
