# pylint: disable=line-too-long
"""
Problem 12: The sequence of triangle numbers is generated by adding the natural numbers.
            What is the value of the first triangle number to have over five hundred divisors?
Answer: 
Execution time: 0.0000s
"""

from math import sqrt
from utils import profiler


# Function to count the number of divisors of a number
def count_divisors(n):
    """
    This function counts how many divisors a number n has. It iterates from 1 to sqrt(n) to find divisors. 
    For each divisor i, both i and n / i are divisors unless they are the same, in which case it's only counted once.
    """
    divisors = 0
    for i in range(1, int(sqrt(n)) + 1):
        if n % i == 0:
            divisors += 2 if i != n // i else 1  # If i and n/i are different, count both
    return divisors


@profiler
def compute():
    """Function to find the first triangle number with more than 500 divisors"""
    n = 1
    while True:
        # Calculate the nth triangle number
        triangle_number = n * (n + 1) // 2

        # Find the divisors of the triangle number
        if count_divisors(triangle_number) > 500:
            return triangle_number

        n += 1


if __name__ == "__main__":
    print(f"Problem 12: {compute()}")
